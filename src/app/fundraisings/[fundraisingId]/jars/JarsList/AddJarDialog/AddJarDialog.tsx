import { useRef, useState } from 'react';
import { useFormStatus } from 'react-dom';
import classNames from 'classnames';

import { postJar, type JarsPageState, type CreateJarPayload } from '@/dal';
import { Button, CuratorsDropdown, Dialog, useDialog } from '@/library';
import type { Jar } from '@/types';

import styles from './AddJarDialog.module.css';

const SubmitButton = () => {
  const { pending } = useFormStatus();

  return (
    <Button disabled={pending} type='submit' className={styles['save-expense']}>
      {pending ? '–ó–±–µ—Ä—ñ–≥–∞—î–º–æ...' : 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏'}
    </Button>
  );
};

export const AddJarDialog = ({
  addJar,
  jars,
  fundraisingId,
}: {
  addJar: JarsPageState['addJar'];
  jars: Array<Jar>;
  fundraisingId: string;
}) => {
  const formRef = useRef<HTMLFormElement>(null);

  const [errorText, setErrorText] = useState('');

  const resetForm = () => {
    formRef.current?.reset();
    setErrorText('');
  };

  const { openDialog, dialogState, closeDialog } = useDialog({
    prepareClosing: resetForm,
  });

  const handleSubmit = async (formData: FormData) => {
    const url = formData.get('url') as string;
    const owner = formData.get('ownerName') as string;
    const color = formData.get('jarColor') as string;

    const existingJar = jars.find((jar) => {
      return jar.url === url || jar.ownerName === owner;
    });

    if (existingJar) {
      setErrorText(`–¢–∞–∫–∞ –±–∞–Ω–∫–∞ –≤–∂–µ —î —É ${existingJar.ownerName}`);
      return;
    }

    const existingColor = jars.some((jar) => {
      return jar.color === color;
    });

    if (existingColor) {
      setErrorText('–¶–µ–π –∫–æ–ª—ñ—Ä –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π üòî –°–ø—Ä–æ–±—É–π –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π üòâ');
      return;
    }

    const createJarPayload: CreateJarPayload = {
      url,
      ownerName: owner,
      fundraisingCampaignId: Number(fundraisingId),
      color: color,
    };

    const response = await postJar(createJarPayload);

    addJar(response);
    resetForm();
    closeDialog();
  };

  return (
    <Dialog
      title='–î–∞–≤–∞–π –¥–æ–¥–∞–º–æ –±–∞–Ω–æ—á–∫—É!'
      dialogState={dialogState}
      renderButton={() => (
        <Button className={classNames(styles['add-jar'])} onClick={openDialog}>
          ‚ûï –î–æ–¥–∞—Ç–∏ –±–∞–Ω–∫—É
        </Button>
      )}
      renderContent={() => (
        <div className={styles['add-jar-inputs-wrapper']}>
          <form
            ref={formRef}
            className={styles['add-jar-inputs']}
            action={handleSubmit}
          >
            <label htmlFor='owner-input'>–Ø–∫ –∑–≤—É—Ç—å –≤–ª–∞—Å–Ω–∏–∫–∞ –±–∞–Ω–∫–∏?</label>
            <input
              name='ownerName'
              id='owner-input'
              placeholder='–î–∂–µ–π—Å–æ–Ω –°—Ç–µ—Ç—Ö–µ–º'
              type='text'
              required
              maxLength={30}
            />
            <label htmlFor='url-input'>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞–Ω–∫—É</label>
            <input
              id='url-input'
              name='url'
              placeholder='url'
              type='url'
              required
              pattern='https://send.monobank.ua/jar/.*'
            />
            <label htmlFor='color-input'>–Ø–∫–∏–π –∫–æ–ª—ñ—Ä —Ö–æ—á–µ—à –æ–±—Ä–∞—Ç–∏?</label>
            <input
              name='jarColor'
              id='color-input'
              type='color'
              required
              maxLength={30}
            />
            <label htmlFor='curator-input'>–û–±–µ—Ä–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞</label>
            <CuratorsDropdown name='parentJarId' />
            <SubmitButton />

            {errorText && (
              <span className={styles['form-error']}>‚ö†Ô∏è {errorText}</span>
            )}
          </form>
        </div>
      )}
    />
  );
};
